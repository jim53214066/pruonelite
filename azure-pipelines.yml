# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  dockerRegistryServiceConnection: 'JimDockerHub'
  imageRepository: 'whitewolfjim/epa-app'
  containerRegistry: 'JimDockerHub'
  kubernetesServiceConnection: 'aes-aks-resource-connection'
  resourceGroup: 'openai'
  aksCluster: 'aes'
  namespace: 'aes'

stages:
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: java -version
      displayName: 'Check Java Version'

    - script: mvn -version
      displayName: 'Check Maven Version'

    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'

    - task: Docker@2
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'latest'


- stage: DeployToDev
  displayName: 'Deploy to Development'
  jobs:
  - job: DeployToDev
    displayName: 'Deploy to Development'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      displayName: 'Deploy to Development'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(kubernetesServiceConnection)
        azureResourceGroup: $(resourceGroup)
        kubernetesCluster: $(aksCluster)
        namespace: $(namespace)
        command: 'apply'
        useConfigurationFile: false
        arguments: |
          -f $(System.DefaultWorkingDirectory)/deployment.yml
          -f $(System.DefaultWorkingDirectory)/service.yml
          -f $(System.DefaultWorkingDirectory)/ingress.yml